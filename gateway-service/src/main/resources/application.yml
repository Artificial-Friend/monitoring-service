spring:
  application:
    name: gateway-service
#  security:
#    oauth2:
#      client:
#        registration:
#          login-client:
#            provider: uaa
#            client-id: login-client
#            client-secret: secret
#            authorization-grant-type: authorization_code
#            redirect-uri-template: "{baseUrl}/login/oauth2/code/{registrationId}"
#            scope: openid,profile,email,resource.read
#        provider:
#          uaa:
#            authorization-uri: http://localhost:8090/uaa/oauth/authorize
#            token-uri: http://localhost:8090/uaa/oauth/token
#            user-info-uri: http://localhost:8090/uaa/userinfo
#            user-name-attribute: sub
#            jwk-set-uri: http://localhost:8090/uaa/token_keys
  security:
    oauth2:
      client:
        registration:
          keycloak:
            client-id: gateway-service
            client-secret: 636f4ef3-e6aa-4076-a5ae-5e4925524fed
            scope: openid
        provider:
          keycloak:
            issuer-uri: ${KEYCLOAK_URL:http://localhost:8080}/auth/realms/Bookshop
#  session:
#    store-type: redis
#  redis:
#    host: localhost
#    port: 6379













  #    oauth2:
#      client:
#        registration:
#          keycloak:
##            provider: keycloak
#            client-id: gateway
#            client-secret: secret
##            authorization-grant-type: authorization_code
##            redirect-uri-template: "{baseUrl}/login/oauth2/code/{registrationId}"
#            scope: openid
#        provider:
#          keycloak:
##            authorization-uri: http://localhost:8090/uaa/oauth/authorize
##            token-uri: http://uaa:8090/uaa/oauth/token
##            user-info-uri: http://uaa:8090/uaa/userinfo
##            user-name-attribute: sub
##            jwk-set-uri: http://uaa:8090/uaa/token_keys
#            issuer-uri: ${KEYCLOAK_URL:http://localhost:8080}/auth/












  cloud:
    gateway:
      default-filters:
        - TokenRelay
        - name: RequestRateLimiter
          args:
            redis-rate-limiter.replenishRate: 10
            redis-rate-limiter.burstCapacity: 20
            redis-rate-limiter.requestedTokens: 1
      routes:
        - id: monitoringService
          uri: lb://MONITORING-SERVICE
          predicates:
            - Path=/monitored-endpoint/**
        - id: monitoringResultService
          uri: lb://MONITORING-RESULT-SERVICE
          predicates:
            - Path=/monitoring-result/**
#      default-filters:
#        - TokenRelay

server:
  port: 8080

eureka:
  client:
    serviceUrl:
      defaultZone: ${EUREKA_URL}
#      defaultZone: http://localhost:8761/eureka/
